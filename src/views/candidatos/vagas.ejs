<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Connect Skills</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/shared/style.css">
  <link rel="stylesheet" href="/css/candidatos/vagas.css">
  <link rel="icon" href="/img/CONNECT.png">
</head>
<body>
  <%- include('../partials/header-candidato') %>
  <%- include('../partials/flash-messages') %>

  <%
    const tipoMap = {
      Presencial:   'Presencial',
      Home_Office:  'Home Office',
      H_brido:      'Híbrido'
    };
  %>

  <main class="container py-5">
    <h2 class="mb-4 mt-5">Vagas disponíveis</h2>

    <% if (vagas.length === 0) { %>
      <div class="alert alert-light text-center">Nenhuma vaga disponível no momento.</div>
    <% } else { %>
      <% vagas.forEach(vaga => { %>
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <div class="row g-3 align-items-start">
              <div class="col-12 col-md-auto text-center">
                <a href="/empresa/perfil/<%= vaga.empresa.id %>">
                  <img
                    src="<%= vaga.empresa.foto_perfil || '/img/empresa-padrao.png' %>"
                    alt="Logo da empresa"
                    class="rounded-circle"
                    width="80"
                    height="80"
                    style="object-fit: cover;"
                  >
                </a>
              </div>

              <div class="col">
                <h5 class="mb-1 fw-bold"><%= vaga.empresa?.nome_empresa %></h5>

                <%
                  const normalizar = str => str?.normalize('NFD').replace(/[̀-ͯ]/g, '').toLowerCase().trim();
                  const partesOriginais = [vaga.empresa?.cidade, vaga.empresa?.estado, vaga.empresa?.pais]
                    .filter(p => p && p.toLowerCase() !== 'undefined' && p.toLowerCase() !== 'null');
                  const partesUnicas = [];
                  const vistos = new Set();

                  for (const parte of partesOriginais) {
                    const normalizada = normalizar(parte);
                    if (!vistos.has(normalizada)) {
                      vistos.add(normalizada);
                      partesUnicas.push(parte.trim());
                    }
                  }

                  const localidade = partesUnicas.join(', ');
                %>

                <small class="text-muted d-block mb-2">
                  <%= localidade || 'Localidade não informada' %>
                </small>

                <p class="fw-semibold mb-1"><%= vaga.cargo %></p>
                <p class="mb-2"><%= vaga.descricao %></p>

                <small class="text-muted d-block mb-2"><%= tipoMap[vaga.tipo_local_trabalho] %></small>

                <div class="mb-2">
                  <strong>Escala:</strong> <%= vaga.escala_trabalho %><br>

                  <% if (vaga.salario) { %>
                    <strong>Salário:</strong>
                    <%= Number(vaga.salario).toLocaleString('pt-BR', { style: 'currency', currency: vaga.moeda || 'BRL' }) %><br>
                  <% } %>

                  <% if (vaga.dias_presenciais) { %>
                    <strong>Dias presenciais:</strong> <%= vaga.dias_presenciais %><br>
                  <% } %>
                  <% if (vaga.dias_home_office) { %>
                    <strong>Dias home office:</strong> <%= vaga.dias_home_office %><br>
                  <% } %>

                  <% if (vaga.beneficio && typeof vaga.beneficio === 'string' && vaga.beneficio.trim() !== '') { %>
                    <strong>Benefícios:</strong>
                    <%= vaga.beneficio.split(',').map(b => b.trim()).filter(b => b.length > 0).join(', ') %><br>
                  <% } %>

                  <% if (vaga.beneficio_outro) { %>
                    <strong>Outro benefício:</strong> <%= vaga.beneficio_outro %><br>
                  <% } %>
                </div>

                <% if (vaga.vaga_area.length > 0) { %>
                  <p class="mb-1"><small class="text-muted">Áreas de atuação:</small></p>
                  <div class="d-flex flex-wrap gap-1">
                    <% vaga.vaga_area.forEach(rel => { %>
                      <span class="badge rounded-pill border border-primary text-primary">
                        <%= rel.area_interesse.nome %>
                      </span>
                    <% }) %>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Botão para abrir/fechar o bloco da IA -->
          <div class="text-center pb-4">
            <button class="btn btn-outline-primary fw-bold botao-ia">Iniciar teste com a IA</button>
          </div>

          <!-- Bloco da IA (colapsado por padrão) -->
          <div class="mt-3 border rounded p-3 bg-light bloco-ia" style="display:none;">
            <%
              // Perguntas: 1 por linha no campo "pergunta" da vaga
              const perguntas = (vaga.pergunta || '')
                .split('\n')
                .map(s => s.trim())
                .filter(Boolean);

              const opcoes = (vaga.opcao || '')
                .split('|')
                .map(s => s.trim())
                .filter(Boolean);
            %>

            <!-- Cabeçalho -->
            <div class="alert alert-secondary small mb-3">
              <strong>Questionário da vaga:</strong>
              <% if (!perguntas.length) { %>
                <span> — (esta vaga não possui perguntas configuradas)</span>
              <% } %>
            </div>

            <!-- Lista de perguntas + inputs de resposta -->
            <% if (perguntas.length) { %>
              <div class="mb-3">
                <% perguntas.forEach((q, idx) => { %>
                  <div class="mb-2">
                    <label class="form-label"><%= (idx + 1) + '. ' + q %></label>
                    <input type="text" class="form-control resposta-ia-item" placeholder="Sua resposta...">
                  </div>
                <% }) %>
              </div>
            <% } else { %>
              <!-- Fallback: se a empresa cadastrou zero perguntas, uso um único campo livre -->
              <label class="form-label fw-semibold">Sua resposta:</label>
              <textarea class="form-control resposta-ia" rows="3" placeholder="Ex.: Sim, configuração de switches e roteadores."></textarea>
            <% } %>

            <!-- Opções (itens) apenas como referência visual
            <% if (opcoes.length) { %>
              <p class="mb-1"><small class="text-muted">Áreas da vaga (itens usados pela IA):</small></p>
              <div class="d-flex flex-wrap gap-1 mb-2">
                <% opcoes.forEach(o => { %>
                  <span class="badge text-bg-light border"><%= o %></span>
                <% }) %>
              </div>
            <% } %> -->

            <div class="d-flex gap-2 mt-2">
              <button class="btn btn-primary btn-avaliar" data-vaga-id="<%= vaga.id %>">
                Analisar compatibilidade
              </button>
              <span class="text-muted small status-ia" style="display:none;">
                Espere alguns segundos, a análise está sendo feita...
              </span>
            </div>

            <div class="mt-3 resultados-ia"></div>
          </div>
        </div>
      <% }) %>
    <% } %>
  </main>

  <script>
    // Toggle do bloco da IA (delegation)
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('.botao-ia');
      if (!btn) return;
      const card = btn.closest('.card');
      const bloco = card.querySelector('.bloco-ia');
      if (!bloco) return;
      const showing = bloco.style.display !== 'none';
      bloco.style.display = showing ? 'none' : 'block';
      btn.textContent = showing ? 'Iniciar teste com a IA' : 'Ocultar teste';
    });

    // Avaliar compatibilidade (delegation)
    document.addEventListener('click', async (e) => {
      const btn = e.target.closest('.btn-avaliar');
      if (!btn) return;

      const container = btn.closest('.mt-3.border');
      const status    = container.querySelector('.status-ia');
      const output    = container.querySelector('.resultados-ia');

      // Inputs por pergunta
      const inputs = container.querySelectorAll('.resposta-ia-item');
      // Fallback: single textarea
      const textarea = container.querySelector('.resposta-ia');

      const vagaId = btn.getAttribute('data-vaga-id');
      output.innerHTML = '';

      // Monta payload
      let payload = {};
      if (inputs && inputs.length) {
        const respostas = Array.from(inputs).map(i => (i.value || '').trim());
        const temAlgo = respostas.some(v => v.length > 0);
        if (!temAlgo) {
          output.innerHTML = '<div class="text-danger">Preencha ao menos uma resposta.</div>';
          return;
        }
        payload = { respostas }; // array alinhado com as perguntas
      } else if (textarea) {
        const resposta = (textarea.value || '').trim();
        if (!resposta) {
          output.innerHTML = '<div class="text-danger">Digite sua resposta antes de analisar.</div>';
          return;
        }
        payload = { resposta }; // fallback
      } else {
        output.innerHTML = '<div class="text-danger">Não foi possível ler suas respostas.</div>';
        return;
      }

      // Loading
      btn.disabled = true;
      status.style.display = 'inline';

      try {
        const resp = await fetch(`/candidato/vaga/${vagaId}/avaliar`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const data = await resp.json();

        if (!data.ok) {
          output.innerHTML = `<div class="text-danger">${data.error || 'Erro desconhecido.'}</div>`;
          return;
        }

        // Nota geral
        if (typeof data.score === 'number') {
          output.insertAdjacentHTML('afterbegin',
            `<div class="alert alert-info py-2 mb-3">
               <strong>Sua compatibilidade geral:</strong> ${data.score}%
             </div>`);
        }

        // Itens
        if (Array.isArray(data.results) && data.results.length) {
          const lista = data.results.map(r => {
            const item = String(r.Item || '').replace(/^Item\s*\d+:\s*/i, '');
            const rating = (typeof r.rating === 'number') ? `${r.rating}%` : '-';
            return `<li class="list-group-item d-flex justify-content-between align-items-center">
              <span>${item}</span>
              <span class="badge bg-secondary rounded-pill">${rating}</span>
            </li>`;
          }).join('');

          output.innerHTML += `
            <div class="mt-2">
              <div class="fw-semibold mb-1">Compatibilidade por opção</div>
              <ul class="list-group">${lista}</ul>
            </div>`;
        } else {
          output.innerHTML += '<div class="text-muted">A IA não retornou itens para avaliar.</div>';
        }
      } catch (err) {
        output.innerHTML = '<div class="text-danger">Falha ao contatar o serviço de análise. Tente novamente.</div>';
      } finally {
        status.style.display = 'none';
        btn.disabled = false;
      }
    });
  </script>

  <%- include('../partials/footer') %>
</body>
</html>
