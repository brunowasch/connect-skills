generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model area_interesse {
  id             Int              @id @default(autoincrement())
  nome           String?          @unique @db.VarChar(100)
  padrao         Boolean?         @default(false)
  candidato_area candidato_area[]
  vaga_area      vaga_area[]
}

model candidato {
  id              Int              @id @default(autoincrement())
  usuario_id      Int              @unique
  nome            String?
  sobrenome       String?
  data_nascimento DateTime?
  pais            String?
  estado          String?
  cidade          String?
  telefone        String?
  foto_perfil     String?
  usuario         usuario          @relation(fields: [usuario_id], references: [id])
  candidato_area  candidato_area[]

  avaliacoes     vaga_avaliacao[]    @relation("CandidatoAvaliacoes")
  candidato_link candidato_link[]
  anexos         candidato_arquivo[]
}

model candidato_link {
  id           Int    @id @default(autoincrement())
  candidato_id Int
  label        String @db.VarChar(50)
  url          String @db.VarChar(255)
  ordem        Int    @default(0)

  candidato candidato @relation(fields: [candidato_id], references: [id], onDelete: Cascade)

  @@index([candidato_id])
}

model candidato_arquivo {
  id           Int      @id @default(autoincrement())
  candidato_id Int
  nome         String
  url          String
  mime         String
  tamanho      Int
  criadoEm     DateTime @default(now())

  candidato candidato @relation(fields: [candidato_id], references: [id])

  @@index([candidato_id], name: "idx_candidato_arquivo_candidato_id")
}

enum arquivo_tipo {
  PDF
  DOC
  XLS
  IMG
  LINK
  RAW
  OUTRO
}

model candidato_area {
  candidato_id      Int
  area_interesse_id Int
  area_interesse    area_interesse @relation(fields: [area_interesse_id], references: [id])
  candidato         candidato      @relation(fields: [candidato_id], references: [id])

  @@id([candidato_id, area_interesse_id])
  @@index([area_interesse_id], map: "candidato_area_area_interesse_id_fkey")
}

model empresa {
  id           Int     @id @default(autoincrement())
  usuario_id   Int     @unique
  nome_empresa String
  descricao    String
  telefone     String?
  pais         String?
  estado       String?
  cidade       String?
  foto_perfil  String?
  usuario      usuario @relation(fields: [usuario_id], references: [id])
  vagas        vaga[]
}

model soft_skill {
  id              Int               @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  nome            String
  vaga_soft_skill vaga_soft_skill[]
}

model usuario {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  senha            String
  tipo             String
  email_verificado Boolean    @default(false)
  created_at       DateTime?  @default(now()) @db.DateTime(0)
  googleId         String?    @unique(map: "googleId")
  avatarUrl        String?
  nome             String?    @db.VarChar(255)
  sobrenome        String?    @db.VarChar(255)
  candidato        candidato?
  empresa          empresa?
}

model vaga {
  id                  Int                      @id @default(autoincrement()) @db.UnsignedInt
  empresa_id          Int
  cargo               String
  tipo_local_trabalho vaga_tipo_local_trabalho
  escala_trabalho     String
  dias_presenciais    Int?
  dias_home_office    Int?
  salario             Decimal?                 @db.Decimal(10, 2)
  moeda               String?                  @db.VarChar(5)
  descricao           String                   @db.Text
  beneficio           String?                  @db.Text
  pergunta            String?                  @db.Text
  opcao               String?                  @db.Text
  created_at          DateTime                 @default(now())
  empresa             empresa                  @relation(fields: [empresa_id], references: [id])
  vaga_area           vaga_area[]
  vaga_soft_skill     vaga_soft_skill[]

  // <<< back-relation para as avaliações >>>
  avaliacoes vaga_avaliacao[] @relation("VagaAvaliacoes")

  @@index([empresa_id], map: "vaga_empresa_id_fkey")
}

model vaga_area {
  vaga_id           Int            @db.UnsignedInt
  area_interesse_id Int
  area_interesse    area_interesse @relation(fields: [area_interesse_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vaga_has_area_interesse_area_interesse1")
  vaga              vaga           @relation(fields: [vaga_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vaga_has_area_interesse_vaga1")

  @@id([vaga_id, area_interesse_id])
  @@index([area_interesse_id], map: "fk_vaga_has_area_interesse_area_interesse1_idx")
  @@index([vaga_id], map: "fk_vaga_has_area_interesse_vaga1_idx")
}

model vaga_soft_skill {
  soft_skill_id Int        @db.UnsignedInt
  vaga_id       Int        @db.UnsignedInt
  soft_skill    soft_skill @relation(fields: [soft_skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_soft_skill_has_vaga_soft_skill1")
  vaga          vaga       @relation(fields: [vaga_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_soft_skill_has_vaga_vaga1")

  @@id([soft_skill_id, vaga_id])
  @@index([soft_skill_id], map: "fk_soft_skill_has_vaga_soft_skill1_idx")
  @@index([vaga_id], map: "fk_soft_skill_has_vaga_vaga1_idx")
}

model sessions {
  session_id String  @id @db.VarChar(128)
  expires    Int     @db.UnsignedInt
  data       String? @db.MediumText
}

model vaga_avaliacao {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  vaga_id      Int      @db.UnsignedInt
  candidato_id Int
  score        Int
  resposta     String?
  // Se no MySQL você criou JSON: mantenha Json?
  // Se criou LONGTEXT: troque para String?
  breakdown    Json? // ou: String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  vaga      vaga      @relation("VagaAvaliacoes", fields: [vaga_id], references: [id])
  candidato candidato @relation("CandidatoAvaliacoes", fields: [candidato_id], references: [id])

  @@unique([vaga_id, candidato_id], name: "vaga_candidato_unique")
  @@map("vaga_avaliacao") // opcional (só se você quiser explicitar o nome da tabela)
}

enum vaga_tipo_local_trabalho {
  Presencial
  Home_Office @map("Home Office")
  H_brido     @map("Híbrido")
}
